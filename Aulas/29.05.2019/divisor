library ieee;
use ieee.std_logic_1164.all;
--Divisor
--A B entradas, A vai ser dividido por B
--Clock
--Reset/Start -  reiniciar e zerar o valor de acc(acumulador)
--Resto -- cout, o programa vai fazer A-B e o resto vai ser somado ao resultado que é um acumulador
--Resultado e ready( avisa que a divisão ja terminou)
-- tem que usar subnbits addnbits e add1b como component

entity divisor is
generic(size :integer :=8);
port(a,b:in std_logic_vector(size-1 downto 0);
	  clk,reset: in std_logic;
	  Resto,Resultado: out std_logic_vector(size-1 downto 0);
	  Ready: out std_logic);
end divisor;

architecture arq of divisor is

component subtrator is 
generic(n: integer := 2*size);
port(a,b:in std_logic_vector(n-1 downto 0);
	  s:out std_logic_vector(n-1 downto 0);
	  M:in std_logic;
	  cout:out std_logic);
end component;

signal a_m,b_m,temp_a_m : std_logic_vector(2*size-1 downto 0);
signal temp_res:std_logic_vector(size-1 downto 0);
signal cout: std_logic;

begin

Resultado <= temp_res;

sub: subtrator port map(a_m,b_m,temp_a_m,'1',cout);

process(reset,clk)
variable cont: integer range 0 to 9 :=0;
begin

if(reset = '1') then
a_m(size-1 downto 0) <= a;
a_m(2*size-1 downto size) <=(others =>'0');
b_m(size-1 downto 0) <=(others =>'0');
b_m(2*size-1 downto size) <= b;
temp_res <=(others =>'0');
ready <='0';
cont := 0;
-- zerar contador

elsif(clk'event and clk = '0') then
if(cont = size) then
ready <= '1';
else
cont := cont +1;
temp_res(size-1 downto 1) <= temp_res(size-2 downto 0);
temp_res(0) <= cout;
b_m(2*size-2 downto 0) <= b_m(2*size-1 downto 1);
b_m(2*size-1) <= '0';
if( cout = '1') then
a_m <= temp_a_m;
end if;
end if;
end if;

end process;




end arq;

----------------------------------------------------------
--subtrator

library ieee;
use ieee.std_logic_1164.all;

entity subtrator is 
generic(n: integer := 8);
port(a,b:in std_logic_vector(n-1 downto 0);
	  s:out std_logic_vector(n-1 downto 0);
	  M:in std_logic;
	  cout:out std_logic);
end subtrator;

architecture add of subtrator is 

component add1b is 
port(a,b,cin: in std_logic;
	  s,cout:out std_logic);
end component;

signal sel:std_logic_vector(n-1 downto 0);
signal carry: std_logic_vector (n downto 0);
begin

laco: for i in 0 to n-1 generate
sel(i)<=b(i) xor M;
end generate;

laco2: for j in 0 to n-1 generate
adds:add1b port map(  a(j),
							 sel(j),
							 carry(j),
							 s(j),
							 carry(j+1));
end generate;
carry (0)<= M;
cout <= carry(n);
end add;

----------------------------------------------------
--IFPB
--Data: 02.04.19
--Somador completo
--Aula5

library ieee;
use ieee.std_logic_1164.all;

entity add1b is
port(a,b,cin: in std_logic;
		cout,s:out std_logic);
end add1b;

architecture add1b of add1b is
signal temp: std_logic;
begin

temp <= a xor b;
cout <= (a and b) or (cin and temp);
s <= cin xor temp;

end add1b;
